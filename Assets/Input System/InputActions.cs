//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input System/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""InputForTesting"",
            ""id"": ""03b33935-f292-4ad3-a7d0-8fb520dd3482"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""9f07c728-91fc-49c4-9f97-c26f6d33daea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Leftclick"",
                    ""type"": ""Button"",
                    ""id"": ""4ab2af5e-1154-42c7-9ef6-186642cf83af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rightclick"",
                    ""type"": ""Button"",
                    ""id"": ""2d894f6a-cbf7-4d48-96b8-deebd7394637"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fa856516-6df2-4edc-9cd2-da5148361fec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eea66190-925e-431a-a899-9389cf5d4a6b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Leftclick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""414dd29e-7d51-4c8e-9893-62943a08125d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rightclick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputForTesting
        m_InputForTesting = asset.FindActionMap("InputForTesting", throwIfNotFound: true);
        m_InputForTesting_Move = m_InputForTesting.FindAction("Move", throwIfNotFound: true);
        m_InputForTesting_Leftclick = m_InputForTesting.FindAction("Leftclick", throwIfNotFound: true);
        m_InputForTesting_Rightclick = m_InputForTesting.FindAction("Rightclick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputForTesting
    private readonly InputActionMap m_InputForTesting;
    private IInputForTestingActions m_InputForTestingActionsCallbackInterface;
    private readonly InputAction m_InputForTesting_Move;
    private readonly InputAction m_InputForTesting_Leftclick;
    private readonly InputAction m_InputForTesting_Rightclick;
    public struct InputForTestingActions
    {
        private @InputActions m_Wrapper;
        public InputForTestingActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_InputForTesting_Move;
        public InputAction @Leftclick => m_Wrapper.m_InputForTesting_Leftclick;
        public InputAction @Rightclick => m_Wrapper.m_InputForTesting_Rightclick;
        public InputActionMap Get() { return m_Wrapper.m_InputForTesting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputForTestingActions set) { return set.Get(); }
        public void SetCallbacks(IInputForTestingActions instance)
        {
            if (m_Wrapper.m_InputForTestingActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_InputForTestingActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_InputForTestingActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_InputForTestingActionsCallbackInterface.OnMove;
                @Leftclick.started -= m_Wrapper.m_InputForTestingActionsCallbackInterface.OnLeftclick;
                @Leftclick.performed -= m_Wrapper.m_InputForTestingActionsCallbackInterface.OnLeftclick;
                @Leftclick.canceled -= m_Wrapper.m_InputForTestingActionsCallbackInterface.OnLeftclick;
                @Rightclick.started -= m_Wrapper.m_InputForTestingActionsCallbackInterface.OnRightclick;
                @Rightclick.performed -= m_Wrapper.m_InputForTestingActionsCallbackInterface.OnRightclick;
                @Rightclick.canceled -= m_Wrapper.m_InputForTestingActionsCallbackInterface.OnRightclick;
            }
            m_Wrapper.m_InputForTestingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Leftclick.started += instance.OnLeftclick;
                @Leftclick.performed += instance.OnLeftclick;
                @Leftclick.canceled += instance.OnLeftclick;
                @Rightclick.started += instance.OnRightclick;
                @Rightclick.performed += instance.OnRightclick;
                @Rightclick.canceled += instance.OnRightclick;
            }
        }
    }
    public InputForTestingActions @InputForTesting => new InputForTestingActions(this);
    public interface IInputForTestingActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLeftclick(InputAction.CallbackContext context);
        void OnRightclick(InputAction.CallbackContext context);
    }
}
